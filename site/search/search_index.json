{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Proc\u00e9dure installation & s\u00e9curisation site Wordpress [POC] Cette documentation traite de l'installation d'un site Wordpress de fa\u00e7on s\u00e9curis\u00e9e pour un contexte de production. R\u00e9seaux Topologie Les entreprises disposant d\u2019un site Web public utilis\u00e9 par leurs clients doivent rendre leur serveur Web accessible \u00e0 Internet. Pour prot\u00e9ger le r\u00e9seau local de l\u2019entreprise, le serveur Web est install\u00e9 sur un serveur distinct des ressources internes. La DMZ permet la communication entre les ressources commerciales prot\u00e9g\u00e9es, telles que les bases de donn\u00e9es internes, et le trafic qualifi\u00e9 d\u2019Internet. Un r\u00e9seau DMZ sert de tampon entre Internet et le r\u00e9seau priv\u00e9 d\u2019une entreprise. La DMZ est isol\u00e9e par une passerelle de s\u00e9curit\u00e9, telle qu\u2019un pare-feu, qui filtre le trafic entre la DMZ et un r\u00e9seau LAN. Le serveur de la DMZ est prot\u00e9g\u00e9 par une autre passerelle de s\u00e9curit\u00e9 qui filtre le trafic provenant de r\u00e9seaux externes. Nous utiliserons une machine virtuelle qui fonctionnera sous opnsense comme syst\u00e8me d'exploitation. Elle fera office de routeur firewall. Le compartiment des diff\u00e9rents r\u00e9seaux se fera \u00e0 l'aide des switchs virtuels. Matrice de flux et ACL Source/Destination Serveur Web Serveur de BDD WAN Serveur Web - - permit - permit Serveur de BDD - deny - - deny WAN - permit - deny - Dans cette matrice : La connexion entre le serveur web et le serveur de base de donn\u00e9es est autoris\u00e9e. Le WAN peut acc\u00e9der au serveur web, mais l'acc\u00e8s au serveur de base de donn\u00e9es est refus\u00e9. Les tirets (-) indiquent les cases o\u00f9 aucun flux n'est autoris\u00e9 ou refus\u00e9. Cela peut \u00eatre interpr\u00e9t\u00e9 comme \"aucune r\u00e8gle sp\u00e9cifique d\u00e9finie\". Les donn\u00e9es peuvent circuler de mani\u00e8re bidirectionnelle entre les sources et les destinations La r\u00e8gle par d\u00e9faut est deny deny Nous d\u00e9taillerons pas la configuration d'ACL sur l'opnsense. NAT Sur l'interface WAN il faudra cr\u00e9er la r\u00e8gle NAT de port forwarding suivante: DESTINATION IP FROM IP PORT FORWARD IP FORWARD PORT PROTOCOL @WAN_IP ANY 80 @LAN_IP_WEB 80 TCP @WAN_IP ANY 443 @LAN_IP_WEB 443 TCP @WAN_IP : Correspond \u00e0 l'IP WAN de l'interface du routeur firewall @LAN_IP_WEB : Correspond \u00e0 l'IP lan du serveur WEB. Nous d\u00e9taillerons pas la configuration de r\u00e8gles NAT de port forwarding sur l'opnsense. Back end Update sudo apt update sudo apt full-upgrade -y reboot Installation base de donn\u00e9es Vous pouvez installer MariaDB \u00e0 l'aide de la commande suivante : apt install mariadb-server mariadb-client D\u00e9marrez le d\u00e9mon du serveur de base de donn\u00e9es et activez-le pour qu'il d\u00e9marre automatiquement au prochain d\u00e9marrage \u00e0 l'aide des commandes suivantes : systemctl start mariadb systemctl enable mariadb Post installation Une fois le serveur de base de donn\u00e9es install\u00e9, ex\u00e9cutez la commande suivante pour s\u00e9curiser votre serveur MariaDB: mysql_secure_installation Plusieurs questions de configuration vous seront alors pos\u00e9es, auxquelles vous devrez r\u00e9pondre Y \u00e0 chacune d'entre elles. Remove anonymous users? [Y/n]: Y Disallow root login remotely? [Y/n]: Y Remove test database and access to it? [Y/n]: Y Reload privilege tables now? [Y/n]: Y Relancer le service mariadb: systemctl restart mariadb Cr\u00e9ation un utilisateur base de donn\u00e9es limiter CREATE USER 'wordpress'@'192.168.0.1' IDENTIFIED BY 'CHANGEME'; CREATE DATABASE wordpress; GRANT ALL PRIVILEGES ON wordpress.* TO 'wordpress'@'192.168.0.1'; FLUSH PRIVILEGES; EXIT; Fron end Update sudo apt update sudo apt full-upgrade -y reboot Installation basique de Wordpress Installation Apache Nous commencerons par l'installation du serveur web Apache. Pour installer le serveur web Apache, ex\u00e9cutez la commande suivante : sudo apt install apache2 -y Puis on active le service: sudo systemctl enable apache2 && sudo systemctl start apache2 V\u00e9rifions que le sevice fonctionne: sudo systemctl status apache2 La sortie de commande ressemble \u00e0 cela: root@host:~# sudo systemctl status apache2 \u25cf apache2.service - The Apache HTTP Server Loaded: loaded (/lib/systemd/system/apache2.service; enabled; preset: enabled) Active: active (running) since Mon 2024-04-08 20:58:30 UTC; 13s ago Docs: https://httpd.apache.org/docs/2.4/ Main PID: 2011 (apache2) Tasks: 55 (limit: 4652) Memory: 17.1M CPU: 141ms CGroup: /system.slice/apache2.service \u251c\u25002011 /usr/sbin/apache2 -k start \u251c\u25002012 /usr/sbin/apache2 -k start \u2514\u25002013 /usr/sbin/apache2 -k start Apr 08 20:58:30 wordpress systemd[1]: Starting apache2.service - The Apache HTTP Server... Apr 08 20:58:30 wordpress systemd[1]: Started apache2.service - The Apache HTTP Server. Installation PHP8.2 Ensuite, nous allons installer PHP. PHP8.2 est activ\u00e9 par d\u00e9faut dans le d\u00e9p\u00f4t Debian 12, donc pour installer PHP8.2 avec les extensions, ex\u00e9cutez les commandes suivantes : sudo apt-get install php8.2 php8.2-cli php8.2-common php8.2-imap php8.2-redis php8.2-snmp php8.2-xml php8.2-mysqli php8.2-zip php8.2-mbstring php8.2-curl libapache2-mod-php -y Pour v\u00e9rifier la version de PHP install\u00e9e, ex\u00e9cutez la commande suivante : php -v Vous devriez obtenir le r\u00e9sultat suivant : PHP 8.2.7 (cli) (built: Jun 9 2023 19:37:27) (NTS) Copyright (c) The PHP Group Zend Engine v4.2.7, Copyright (c) Zend Technologies with Zend OPcache v8.2.7, Copyright (c), by Zend Technologies T\u00e9l\u00e9chargement Wordpress Avant d'installer WordPress, nous devons d'abord le t\u00e9l\u00e9charger dans la racine par d\u00e9faut du document Apache : cd /var/www/html wget https://wordpress.org/latest.zi unzip latest.zip rm latest.zip D\u00e9finir les bonnes autorisations pour les fichiers et les dossiers. chown -R www-data:www-data wordpress/ cd wordpress/ find . -type d -exec chmod 755 {} \\; find . -type f -exec chmod 644 {} \\; Maintenant, ouvrez le fichier wp-config.php avec votre \u00e9diteur pr\u00e9f\u00e9r\u00e9 et entrez les informations d'identification de la base de donn\u00e9es que vous avez cr\u00e9\u00e9es \u00e0 l'\u00e9tape pr\u00e9c\u00e9dente. mv wp-config-sample.php wp-config.php nano wp-config.php Il devrait ressembler \u00e0 ceci : // ** Database settings - You can get this info from your web host ** // /** The name of the database for WordPress */ define( 'DB_NAME', 'wordpress' ); /** Database username */ define( 'DB_USER', 'wordpress' ); /** Database password */ define( 'DB_PASSWORD', 'YourStrongPasswordHere' ); Cr\u00e9ation du VHOST Apache cd /etc/apache2/sites-available/ touch wordpress.conf Contenu <VirtualHost *:80> ServerName wordpress.kaze-cloud-secu.local DocumentRoot /var/www/html/wordpress <Directory /var/www/html/wordpress> AllowOverride All </Directory> ErrorLog ${APACHE_LOG_DIR}/error.log CustomLog ${APACHE_LOG_DIR}/access.log combined </VirtualHost> Activez la configuration Apache pour WordPress et r\u00e9\u00e9crivez le module. sudo a2enmod rewrite sudo a2ensite wordpress.conf systemctl reload apache2 Depuis le navigateur: S\u00e9curisation avec un certificat HTTPS Avant de pouvoir utiliser des certificats SSL, nous devons d'abord activer mod_ssl, un module Apache qui prend en charge le cryptage SSL. Activez mod_ssl avec la commande a2enmod : sudo a2enmod ssl sudo systemctl restart apache2 Le module mod_ssl est maintenant activ\u00e9 et pr\u00eat \u00e0 \u00eatre utilis\u00e9. Maintenant qu'Apache est pr\u00eat \u00e0 utiliser le cryptage, nous pouvons passer \u00e0 la g\u00e9n\u00e9ration d'un nouveau certificat SSL. Le certificat stockera quelques informations de base sur votre site, et sera accompagn\u00e9 d'un fichier cl\u00e9 qui permet au serveur de traiter en toute s\u00e9curit\u00e9 des donn\u00e9es crypt\u00e9es. Nous pouvons cr\u00e9er les fichiers de cl\u00e9 et de certificat SSL \u00e0 l'aide de la commande openssl : sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/apache-selfsigned.key -out /etc/ssl/certs/apache-selfsigned.crt La liste compl\u00e8te des invites se pr\u00e9sente comme suit : Country Name (2 letter code) [XX]:FR State or Province Name (full name) []: Locality Name (eg, city) [Default City]: Nantes Organization Name (eg, company) [Default Company Ltd]:EPSI Organizational Unit Name (eg, section) []:ASRBD Common Name (eg, your name or your server's hostname) []:wordpress.kaze-cloud-secu.local Email Address []:webmaster@example.com Les deux fichiers que vous avez cr\u00e9\u00e9s seront plac\u00e9s dans les sous-r\u00e9pertoires appropri\u00e9s de /etc/ssl. Ensuite, nous allons mettre \u00e0 jour notre configuration Apache pour utiliser le nouveau certificat et la nouvelle cl\u00e9. Editer le fichier: /etc/apache2/sites-available/wordpress.conf Ajouter le bloc suivant: <VirtualHost *:443> ServerName wordpress.kaze-cloud-secu.local DocumentRoot /var/www/html/wordpress <Directory /var/www/html/wordpress> AllowOverride All </Directory> SSLEngine on SSLCertificateFile /etc/ssl/certs/apache-selfsigned.crt SSLCertificateKeyFile /etc/ssl/private/apache-selfsigned.key </VirtualHost> La configuration finale: <VirtualHost *:80> ServerName wordpress.kaze-cloud-secu.local Redirect permanent / https://wordpress.kaze-cloud-secu.local/ </VirtualHost> <VirtualHost *:443> ServerName wordpress.kaze-cloud-secu.local DocumentRoot /var/www/html/wordpress <Directory /var/www/html/wordpress> AllowOverride All </Directory> SSLEngine on SSLCertificateFile /etc/ssl/certs/apache-selfsigned.crt SSLCertificateKeyFile /etc/ssl/private/apache-selfsigned.key </VirtualHost> Protection HST HTTP Strict Transport Security, plus connu sous le sigle HSTS est un m\u00e9canisme qui demande au client (le navigateur) de remplacer tous les liens non s\u00e9curis\u00e9s par des liens s\u00e9curis\u00e9s. Ce m\u00e9canisme permet donc de s'assurer que seules des requ\u00eates HTTPS seront utilis\u00e9es au cours de la navigation sur le site, quels que soient les liens contenus dans la page Web. Ce m\u00e9canisme peut \u00e9galement s'appliquer aux sous-domaines si l'on pr\u00e9cise la directive includeSubDomains dans la configuration. Ainsi, les sous domaines seront eux aussi affich\u00e9s en HTTPS. Pour activer le protocole HSTS sur Apache dans les en-t\u00eates de trames, le plus simple est de modifier la configuration du serveur Apache. Ainsi, si le serveur h\u00e9berge plusieurs sites, tous b\u00e9n\u00e9ficieront de cette directive. Pour cela, il convient d'\u00e9diter le fichier /etc/apache2/conf-available/security.conf pour ajouter la ligne ci-dessous : Header always set Strict-Transport-Security \"max-age=31536000; includeSubDomains; preload\" Sinon au niveau de la configuration du wordpress.conf : <VirtualHost *:443> ServerName wordpress.kaze-cloud-secu.local DocumentRoot /var/www/html/wordpress <Directory /var/www/html/wordpress> AllowOverride All </Directory> SSLEngine on SSLCertificateFile /etc/ssl/certs/apache-selfsigned.crt SSLCertificateKeyFile /etc/ssl/private/apache-selfsigned.key Header always set Strict-Transport-Security \"max-age=63072000; includeSubDomains\" </VirtualHost> Important : Le site doit avoir un certificat SSL. Avant de faire la manipulation Relancer le service Apache2. Verification: Protection CORS Le Cross-Origin Resource Sharing ou CORS est un m\u00e9canisme qui permet \u00e0 des ressources restreintes d'une page web d'\u00eatre r\u00e9cup\u00e9r\u00e9es par un autre domaine ext\u00e9rieur au domaine \u00e0 partir duquel la premi\u00e8re ressource a \u00e9t\u00e9 servie. Voici comment activer CORS sur Apache Vous aurez besoin d'activer les en-t\u00eates module pour activer CORS sur Apache sur Debian, ouvrez un terminal de commande et lancez la commande suivante pour activer les en-t\u00eates module. sudo a2enmod headers Si vous souhaitez activer CORS pour un domaine de site Web (par exemple, example.com), sp\u00e9cifiez ce domaine \u00e0 la place du caract\u00e8re g\u00e9n\u00e9rique * . Header add Access-Control-Allow-Origin \"example.com\"; Configuration du wordpress.conf : <VirtualHost *:443> ServerName wordpress.kaze-cloud-secu.local DocumentRoot /var/www/html/wordpress <Directory /var/www/html/wordpress> AllowOverride All </Directory> SSLEngine on SSLCertificateFile /etc/ssl/certs/apache-selfsigned.crt SSLCertificateKeyFile /etc/ssl/private/apache-selfsigned.key Header add Access-Control-Allow-Origin \"wordpress.kaze-cloud-secu.local\" Header always set Strict-Transport-Security \"max-age=63072000; includeSubDomains\" </VirtualHost> Headers Header add Access-Control-Allow-Origin \"wordpress.kaze-cloud-secu.local\" Header always set Strict-Transport-Security \"max-age=63072000; includeSubDomains\" Header set X-XSS-Protection \"1; mode=block\" Header append X-FRAME-OPTIONS \"DENY\" S\u00e9curisation contre les bots : Crowdsec L\u2019outil CrowdSec est une sorte de Fail2Ban moderne et communautaire. L\u2019id\u00e9e est de pouvoir prot\u00e9ger efficacement ses services Web, mais \u00e9galement de pr\u00e9venir les autres utilisateurs des adresses IP malveillantes, des attaques en cours\u2026 et cela de mani\u00e8re automatis\u00e9e, afin de mettre en place des contre-mesures efficaces rapidement ! Les \u00ab Bouncers \u00bb sont l\u00e0 pour appliquer les actions (d\u00e9cisions) des sc\u00e9narios. Il s\u2019installe par exemple sur la machine qui sert de reverse proxy et/ou sur le routeur. Ils peuvent consulter les d\u00e9cisions (via l\u2019API locale) et appliquer une contre-mesure (Bannissement de l\u2019IP, mise en place d\u2019un captcha, etc.) directement sur la machine. Installation CrowdSec Sur Debian 12, CrowdSec est directement dans les d\u00e9p\u00f4ts, ce qui va nous faciliter la vie. Il suffit de mettre \u00e0 jour le cache des paquets et de lancer l'installation : sudo apt-get update sudo apt-get install -y crowdsec V\u00e9rification de l'installation cscli collections list Sortie: COLLECTIONS \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Name \ud83d\udce6 Status Version Local Path \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 crowdsecurity/apache2 \u2714\ufe0f enabled 0.1 /etc/crowdsec/collections/apache2.yaml crowdsecurity/base-http-scenarios \u2714\ufe0f enabled 0.6 /etc/crowdsec/collections/base-http-scenarios.yaml crowdsecurity/http-cve \u2714\ufe0f enabled 1.9 /etc/crowdsec/collections/http-cve.yaml crowdsecurity/linux \u2714\ufe0f enabled 0.2 /etc/crowdsec/collections/linux.yaml crowdsecurity/nginx \u2714\ufe0f enabled 0.2 /etc/crowdsec/collections/nginx.yaml crowdsecurity/sshd \u2714\ufe0f enabled 0.2 /etc/crowdsec/collections/sshd.yaml \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Si la collection \"base-http-scenarios\" est pr\u00e9sente dans la liste, ce qui normalement le cas si vous avez d\u00e9j\u00e0 install\u00e9 Apache sur votre serveur, cela va notamment permettre de bloquer les mauvais User Agents, comme ceux utilis\u00e9s par certains outils de scans. Ceci n'est qu'un exemple, car cette collection va d\u00e9tecter d'autres \u00e9v\u00e9nements comme la recherche de backdoors, etc. On peut regarder si nous avons des d\u00e9cisions actives au niveau de notre instance CrowdSec. En toute logique, non. V\u00e9rifions que ce soit bien le cas avec la commande ci-dessous issue de \"cscli\", l'ensemble de commandes associ\u00e9es \u00e0 CrowdSec. V\u00e9rification du moteur Crowdsec avec Nikto Nikto est un scanner de vuln\u00e9rabilit\u00e9 en ligne de commande logiciel gratuit qui analyse les serveurs Web \u00e0 la recherche de fichiers/CGI dangereux, de logiciels serveur obsol\u00e8tes et d'autres probl\u00e8mes. Avant d'ex\u00e9cuter le scan Nikto, vous pouvez v\u00e9rifier que votre machine Kali Linux parvient \u00e0 charger la page d'accueil de votre site : curl -I wordpress.kaze-cloud-secu.local Si vous obtenez un r\u00e9sultat avec un code de retour HTTP \u00e9gal \u00e0 200 , c'est tout bon ! Maintenant, on va lancer un scan de notre serveur Web avec Nikto. Pour cela, on sp\u00e9cifie l'adresse IP de l'h\u00f4te cible ou le nom de domaine, et on laisse tourner. Comme ceci : nikto -h wordpress.kaze-cloud-secu.local Sortie: \u250c\u2500\u2500(cloud\u327fkali)-[~] \u2514\u2500$ nikto -h wordpress.kaze-cloud-secu.local - Nikto v2.5.0 --------------------------------------------------------------------------- + Target IP: 10.10.100.35 + Target Hostname: wordpress.kaze-cloud-secu.local + Target Port: 80 + Start Time: 2024-04-09 08:41:57 (GMT0) --------------------------------------------------------------------------- + Server: Apache/2.4.57 (Debian) + /: The anti-clickjacking X-Frame-Options header is not present. See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options + /: The X-Content-Type-Options header is not set. This could allow the user agent to render the content of the site in a different fashion to the MIME type. See: https://www.netsparker.com/web-vulnerability-scanner/vulnerabilities/missing-content-type-header/ + Root page / redirects to: https://wordpress.kaze-cloud-secu.local/ + No CGI Directories found (use '-C all' to force check all possible dirs) Suite au scan avec Nikto, mon adresse IP est bien dans le viseur de CrowdSec puisqu'il a d\u00e9cid\u00e9 de bannir mon adresse IP. Cependant, l'adresse IP n'est pas bloqu\u00e9e. En effet, CrowdSec doit s'appuyer sur un Bouncer pour appliquer la d\u00e9cision et bannir l'adresse IP. Installation du Bouncer Installation de PHP Composer Pour d\u00e9ployer le Bouncer PHP sur son serveur, il faut installer Composer sinon il ne s'installera pas correctement. Pour l'installer, nous avons besoin de deux paquets : php-cli et unzip, que l'on va installer sans plus attendre : sudo apt-get update sudo apt-get install php-cli unzip Ensuite, il faut se positionner dans son r\u00e9pertoire racine et r\u00e9cup\u00e9rer l'installeur avec Curl : cd ~ curl -sS https://getcomposer.org/installer -o composer-setup.php Enfin, lancez l'installation de Composer : sudo php composer-setup.php --install-dir=/usr/local/bin --filename=composer Sortie: root@wordpress:/root# sudo php composer-setup.php --install-dir=/usr/local/bin --filename=composer All settings correct for using Composer Downloading... Composer (version 2.7.2) successfully installed to: /usr/local/bin/composer Use it: php /usr/local/bin/composer root@wordpress:/root# Installation du Bouncer - niveau Apache Nous avons besoin de Git pour installer ce Bouncer afin de cloner le projet. Pour installer Git : sudo apt-get install git Ensuite, on r\u00e9cup\u00e8re le projet en le clonant en local : git clone https://github.com/crowdsecurity/cs-php-bouncer.git On obtient un dossier nomm\u00e9 \"cs-php-bouncer\" dans lequel on va se positionner : cd cs-php-bouncer/ sudo mkdir -p /var/www/crowdsec-standalone-bouncer sudo chown -R $(whoami):$(whoami) /var/www/crowdsec-standalone-bouncer composer create-project crowdsec/standalone-bouncer /var/www/crowdsec-standalone-bouncer --keep-vcs sudo chown -R www-data /var/www/crowdsec-standalone-bouncer sudo chmod g+w /var/www/crowdsec-standalone-bouncer G\u00e9n\u00e9rer une cl\u00e9 API: sudo cscli bouncers add standalone-bouncer Puis modifier le fichier de configuration: cp /var/www/crowdsec-standalone-bouncer/scripts/settings.php.dist /var/www/crowdsec-standalone-bouncer/scripts/settings.php nano /var/www/crowdsec-standalone-bouncer/scripts/settings.php Au niveau de YOUR_BOUNCER_API_KEY , entrer la cl\u00e9 API. Ajouter dans le bloc wordpress.conf : <VirtualHost *:443> ServerName wordpress.kaze-cloud-secu.local DocumentRoot /var/www/html/wordpress <Directory /var/www/html/wordpress> AllowOverride All </Directory> SSLEngine on SSLCertificateFile /etc/ssl/certs/apache-selfsigned.crt SSLCertificateKeyFile /etc/ssl/private/apache-selfsigned.key Header add Access-Control-Allow-Origin \"wordpress.kaze-cloud-secu.local\" Header always set Strict-Transport-Security \"max-age=63072000; includeSubDomains\" Header set X-XSS-Protection \"1; mode=block\" php_value auto_prepend_file \"/var/www/crowdsec-standalone-bouncer/scripts/bounce.php\" </VirtualHost> Refaire un scanne avec nikto et vous devriez avoir un code 403. Et au niveau de votre navigateur une 403. Installation du Bouncer - niveau Wordpress \u00c0 partir de l'interface d'administration de WordPress, cliquez sur le lien \"Ajouter\" du menu \"Extensions\". Gr\u00e2ce \u00e0 la zone de recherche, vous pouvez trouver facilement l'extension \"CrowdSec\". Ensuite, il suffit de cliquer sur le bouton \"Installer maintenant\". Dans la foul\u00e9e de l'installation, cliquez sur le bouton \"Activer\" pour activer l'extension. Cela n'aura pas d'impact sur votre site, car il faut lier le Bouncer CrowdSec \u00e0 notre instance locale CrowdSec pour que cela fonctionne. Ensuite, retournez sur WordPress et cliquez \u00e0 gauche sur \"CrowdSec\" dans le menu afin d'acc\u00e9der \u00e0 la configuration de l'extension. Il va falloir renseigner plusieurs options : API URL : indiquez \"http://localhost:8080\", car CrowdSec est install\u00e9 sur le m\u00eame serveur que WordPress. Bouncer API Key : collez la cl\u00e9 d'API g\u00e9n\u00e9r\u00e9e pr\u00e9c\u00e9demment Bouncing level : en mode \"Normal bouncing\", CrowdSec va bannir ou pr\u00e9senter le Captcha aux clients malveillants selon la configuration, tandis qu'en mode - \"Flex bouncing\", le blocage sera toujours effectu\u00e9 via un Captcha. Enfin, le mode \"Bouncing disabled\" permet \u00e0 CrowdSec d'\u00eatre transparent donc il ne - bloquera plus personne, y compris les pirates. Prenons le mode \"Normal bouncing\" pour le moment. Public website only : d\u00e9sactivez cette option afin de prot\u00e9ger la partie publique du site, mais aussi l'espace d'administration (wp-admin). Si cette option est active, CrowdSec prot\u00e8ge seulement la partie publique du site (front office). Validez en cliquant sur le bouton \"Enregistrer les modifications\". S\u00e9curisation : WAF plugin Wordpress 1: Allez dans Plugins > Ajouter. 2: Une fois l'installation termin\u00e9e, cliquez sur Activer pour activer le plugin sur votre site. 3:Entrer une cl\u00e9 de licence (que l'on peut g\u00e9n\u00e9rer gratuitement via notre adresse mail). 4: Le plug in est maintenant actif, il ne reste plus qu'\u00e0 le configurer selon nos besoins. S\u00e9curisation: Apache mod_security apt-get install libapache-mod-security Le r\u00e9pertoire /etc/modsecurity est alors cr\u00e9\u00e9 avec une configuration par d\u00e9faut qu'il faut renommer pour qu'elle soit effective : cd /etc/modsecurity mv modsecurity.conf-recommended modsecurity.conf Dans le fichier /etc/modsecurity/modsecurity.conf Par d\u00e9faut, on voit que la valeur SecRuleEngine est positionn\u00e9e sur Detection Only , on passe cette valeur \u00e0 On . On va activer les r\u00e8gles: mkdir /etc/modsecurity/activated_rules ln -s /usr/share/modsecurity-crs/base_rules/* /etc/modsecurity/activated_rules cp /usr/share/modsecurity-crs/modsecurity_crs_10_setup.conf /etc/modsecurity Puis on demande au module mod-security d'Apache d'inclure ces fichiers : nano /etc/apache2/mods-enabled/mod-security.conf Ajout de la ligne: Include \"/etc/modsecurity/activated_rules/*.conf\" service apache2 reload Audit s\u00e9curit\u00e9 Nikto Nikto est un scanner de vuln\u00e9rabilit\u00e9 en ligne de commande gratuit qui analyse les serveurs Web \u00e0 la recherche de fichiers/CGI dangereux, de logiciels serveur obsol\u00e8tes et d'autres probl\u00e8mes de configurations. Il effectue des v\u00e9rifications g\u00e9n\u00e9riques et sp\u00e9cifiques au type de serveur. nikto -C all -h wordpress.kaze-cloud-secu.local Sortie: - Nikto v2.5.0 --------------------------------------------------------------------------- + Target IP: 10.10.100.35 + Target Hostname: wordpress.kaze-cloud-secu.local + Target Port: 80 + Start Time: 2024-04-09 10:19:58 (GMT0) --------------------------------------------------------------------------- + Server: Apache/2.4.57 (Debian) + /: The anti-clickjacking X-Frame-Options header is not present. See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options + /: The X-Content-Type-Options header is not set. This could allow the user agent to render the content of the site in a different fashion to the MIME type. See: https://www.netsparker.com/web-vulnerability-scanner/vulnerabilities/missing-content-type-header/ + Root page / redirects to: https://wordpress.kaze-cloud-secu.local/ + 26584 requests: 0 error(s) and 2 item(s) reported on remote host + End Time: 2024-04-09 10:21:04 (GMT0) (66 seconds) --------------------------------------------------------------------------- WPScan WP scan est un scanner de vuln\u00e9rabilit\u00e9s pour WordPress. Il est d\u00e9velopp\u00e9 en Ruby. Il est capable de lister les plugins utilis\u00e9s et vous donner les failles de s\u00e9curit\u00e9 associ\u00e9es. Il int\u00e8gre aussi un module de brute-force pour s\u2019attaquer \u00e0 l\u2019interface d\u2019administration de WordPress. wpscan --disable-tls-checks --url wordpress.kaze-cloud-secu.local --enumerate Les scannes tombent, car CrowdSec ou Wordfence d\u00e9tecte qu'on fait des requ\u00eates anormaux et agressives.","title":"Proc\u00e9dure installation & s\u00e9curisation site Wordpress [POC]"},{"location":"#procedure-installation-securisation-site-wordpress-poc","text":"Cette documentation traite de l'installation d'un site Wordpress de fa\u00e7on s\u00e9curis\u00e9e pour un contexte de production.","title":"Proc\u00e9dure installation &amp; s\u00e9curisation site Wordpress [POC]"},{"location":"#reseaux","text":"","title":"R\u00e9seaux"},{"location":"#topologie","text":"Les entreprises disposant d\u2019un site Web public utilis\u00e9 par leurs clients doivent rendre leur serveur Web accessible \u00e0 Internet. Pour prot\u00e9ger le r\u00e9seau local de l\u2019entreprise, le serveur Web est install\u00e9 sur un serveur distinct des ressources internes. La DMZ permet la communication entre les ressources commerciales prot\u00e9g\u00e9es, telles que les bases de donn\u00e9es internes, et le trafic qualifi\u00e9 d\u2019Internet. Un r\u00e9seau DMZ sert de tampon entre Internet et le r\u00e9seau priv\u00e9 d\u2019une entreprise. La DMZ est isol\u00e9e par une passerelle de s\u00e9curit\u00e9, telle qu\u2019un pare-feu, qui filtre le trafic entre la DMZ et un r\u00e9seau LAN. Le serveur de la DMZ est prot\u00e9g\u00e9 par une autre passerelle de s\u00e9curit\u00e9 qui filtre le trafic provenant de r\u00e9seaux externes. Nous utiliserons une machine virtuelle qui fonctionnera sous opnsense comme syst\u00e8me d'exploitation. Elle fera office de routeur firewall. Le compartiment des diff\u00e9rents r\u00e9seaux se fera \u00e0 l'aide des switchs virtuels.","title":"Topologie"},{"location":"#matrice-de-flux-et-acl","text":"Source/Destination Serveur Web Serveur de BDD WAN Serveur Web - - permit - permit Serveur de BDD - deny - - deny WAN - permit - deny - Dans cette matrice : La connexion entre le serveur web et le serveur de base de donn\u00e9es est autoris\u00e9e. Le WAN peut acc\u00e9der au serveur web, mais l'acc\u00e8s au serveur de base de donn\u00e9es est refus\u00e9. Les tirets (-) indiquent les cases o\u00f9 aucun flux n'est autoris\u00e9 ou refus\u00e9. Cela peut \u00eatre interpr\u00e9t\u00e9 comme \"aucune r\u00e8gle sp\u00e9cifique d\u00e9finie\". Les donn\u00e9es peuvent circuler de mani\u00e8re bidirectionnelle entre les sources et les destinations La r\u00e8gle par d\u00e9faut est deny deny Nous d\u00e9taillerons pas la configuration d'ACL sur l'opnsense.","title":"Matrice de flux et ACL"},{"location":"#nat","text":"Sur l'interface WAN il faudra cr\u00e9er la r\u00e8gle NAT de port forwarding suivante: DESTINATION IP FROM IP PORT FORWARD IP FORWARD PORT PROTOCOL @WAN_IP ANY 80 @LAN_IP_WEB 80 TCP @WAN_IP ANY 443 @LAN_IP_WEB 443 TCP @WAN_IP : Correspond \u00e0 l'IP WAN de l'interface du routeur firewall @LAN_IP_WEB : Correspond \u00e0 l'IP lan du serveur WEB. Nous d\u00e9taillerons pas la configuration de r\u00e8gles NAT de port forwarding sur l'opnsense.","title":"NAT"},{"location":"#back-end","text":"","title":"Back end"},{"location":"#update","text":"sudo apt update sudo apt full-upgrade -y reboot","title":"Update"},{"location":"#installation-base-de-donnees","text":"Vous pouvez installer MariaDB \u00e0 l'aide de la commande suivante : apt install mariadb-server mariadb-client D\u00e9marrez le d\u00e9mon du serveur de base de donn\u00e9es et activez-le pour qu'il d\u00e9marre automatiquement au prochain d\u00e9marrage \u00e0 l'aide des commandes suivantes : systemctl start mariadb systemctl enable mariadb","title":"Installation base de donn\u00e9es"},{"location":"#post-installation","text":"Une fois le serveur de base de donn\u00e9es install\u00e9, ex\u00e9cutez la commande suivante pour s\u00e9curiser votre serveur MariaDB: mysql_secure_installation Plusieurs questions de configuration vous seront alors pos\u00e9es, auxquelles vous devrez r\u00e9pondre Y \u00e0 chacune d'entre elles. Remove anonymous users? [Y/n]: Y Disallow root login remotely? [Y/n]: Y Remove test database and access to it? [Y/n]: Y Reload privilege tables now? [Y/n]: Y Relancer le service mariadb: systemctl restart mariadb","title":"Post installation"},{"location":"#creation-un-utilisateur-base-de-donnees-limiter","text":"CREATE USER 'wordpress'@'192.168.0.1' IDENTIFIED BY 'CHANGEME'; CREATE DATABASE wordpress; GRANT ALL PRIVILEGES ON wordpress.* TO 'wordpress'@'192.168.0.1'; FLUSH PRIVILEGES; EXIT;","title":"Cr\u00e9ation un utilisateur base de donn\u00e9es limiter"},{"location":"#fron-end","text":"","title":"Fron end"},{"location":"#update_1","text":"sudo apt update sudo apt full-upgrade -y reboot","title":"Update"},{"location":"#installation-basique-de-wordpress","text":"","title":"Installation basique de Wordpress"},{"location":"#installation-apache","text":"Nous commencerons par l'installation du serveur web Apache. Pour installer le serveur web Apache, ex\u00e9cutez la commande suivante : sudo apt install apache2 -y Puis on active le service: sudo systemctl enable apache2 && sudo systemctl start apache2 V\u00e9rifions que le sevice fonctionne: sudo systemctl status apache2 La sortie de commande ressemble \u00e0 cela: root@host:~# sudo systemctl status apache2 \u25cf apache2.service - The Apache HTTP Server Loaded: loaded (/lib/systemd/system/apache2.service; enabled; preset: enabled) Active: active (running) since Mon 2024-04-08 20:58:30 UTC; 13s ago Docs: https://httpd.apache.org/docs/2.4/ Main PID: 2011 (apache2) Tasks: 55 (limit: 4652) Memory: 17.1M CPU: 141ms CGroup: /system.slice/apache2.service \u251c\u25002011 /usr/sbin/apache2 -k start \u251c\u25002012 /usr/sbin/apache2 -k start \u2514\u25002013 /usr/sbin/apache2 -k start Apr 08 20:58:30 wordpress systemd[1]: Starting apache2.service - The Apache HTTP Server... Apr 08 20:58:30 wordpress systemd[1]: Started apache2.service - The Apache HTTP Server.","title":"Installation Apache"},{"location":"#installation-php82","text":"Ensuite, nous allons installer PHP. PHP8.2 est activ\u00e9 par d\u00e9faut dans le d\u00e9p\u00f4t Debian 12, donc pour installer PHP8.2 avec les extensions, ex\u00e9cutez les commandes suivantes : sudo apt-get install php8.2 php8.2-cli php8.2-common php8.2-imap php8.2-redis php8.2-snmp php8.2-xml php8.2-mysqli php8.2-zip php8.2-mbstring php8.2-curl libapache2-mod-php -y Pour v\u00e9rifier la version de PHP install\u00e9e, ex\u00e9cutez la commande suivante : php -v Vous devriez obtenir le r\u00e9sultat suivant : PHP 8.2.7 (cli) (built: Jun 9 2023 19:37:27) (NTS) Copyright (c) The PHP Group Zend Engine v4.2.7, Copyright (c) Zend Technologies with Zend OPcache v8.2.7, Copyright (c), by Zend Technologies","title":"Installation PHP8.2"},{"location":"#telechargement-wordpress","text":"Avant d'installer WordPress, nous devons d'abord le t\u00e9l\u00e9charger dans la racine par d\u00e9faut du document Apache : cd /var/www/html wget https://wordpress.org/latest.zi unzip latest.zip rm latest.zip D\u00e9finir les bonnes autorisations pour les fichiers et les dossiers. chown -R www-data:www-data wordpress/ cd wordpress/ find . -type d -exec chmod 755 {} \\; find . -type f -exec chmod 644 {} \\; Maintenant, ouvrez le fichier wp-config.php avec votre \u00e9diteur pr\u00e9f\u00e9r\u00e9 et entrez les informations d'identification de la base de donn\u00e9es que vous avez cr\u00e9\u00e9es \u00e0 l'\u00e9tape pr\u00e9c\u00e9dente. mv wp-config-sample.php wp-config.php nano wp-config.php Il devrait ressembler \u00e0 ceci : // ** Database settings - You can get this info from your web host ** // /** The name of the database for WordPress */ define( 'DB_NAME', 'wordpress' ); /** Database username */ define( 'DB_USER', 'wordpress' ); /** Database password */ define( 'DB_PASSWORD', 'YourStrongPasswordHere' );","title":"T\u00e9l\u00e9chargement Wordpress"},{"location":"#creation-du-vhost-apache","text":"cd /etc/apache2/sites-available/ touch wordpress.conf Contenu <VirtualHost *:80> ServerName wordpress.kaze-cloud-secu.local DocumentRoot /var/www/html/wordpress <Directory /var/www/html/wordpress> AllowOverride All </Directory> ErrorLog ${APACHE_LOG_DIR}/error.log CustomLog ${APACHE_LOG_DIR}/access.log combined </VirtualHost> Activez la configuration Apache pour WordPress et r\u00e9\u00e9crivez le module. sudo a2enmod rewrite sudo a2ensite wordpress.conf systemctl reload apache2 Depuis le navigateur:","title":"Cr\u00e9ation du VHOST Apache"},{"location":"#securisation-avec-un-certificat-https","text":"Avant de pouvoir utiliser des certificats SSL, nous devons d'abord activer mod_ssl, un module Apache qui prend en charge le cryptage SSL. Activez mod_ssl avec la commande a2enmod : sudo a2enmod ssl sudo systemctl restart apache2 Le module mod_ssl est maintenant activ\u00e9 et pr\u00eat \u00e0 \u00eatre utilis\u00e9. Maintenant qu'Apache est pr\u00eat \u00e0 utiliser le cryptage, nous pouvons passer \u00e0 la g\u00e9n\u00e9ration d'un nouveau certificat SSL. Le certificat stockera quelques informations de base sur votre site, et sera accompagn\u00e9 d'un fichier cl\u00e9 qui permet au serveur de traiter en toute s\u00e9curit\u00e9 des donn\u00e9es crypt\u00e9es. Nous pouvons cr\u00e9er les fichiers de cl\u00e9 et de certificat SSL \u00e0 l'aide de la commande openssl : sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/apache-selfsigned.key -out /etc/ssl/certs/apache-selfsigned.crt La liste compl\u00e8te des invites se pr\u00e9sente comme suit : Country Name (2 letter code) [XX]:FR State or Province Name (full name) []: Locality Name (eg, city) [Default City]: Nantes Organization Name (eg, company) [Default Company Ltd]:EPSI Organizational Unit Name (eg, section) []:ASRBD Common Name (eg, your name or your server's hostname) []:wordpress.kaze-cloud-secu.local Email Address []:webmaster@example.com Les deux fichiers que vous avez cr\u00e9\u00e9s seront plac\u00e9s dans les sous-r\u00e9pertoires appropri\u00e9s de /etc/ssl. Ensuite, nous allons mettre \u00e0 jour notre configuration Apache pour utiliser le nouveau certificat et la nouvelle cl\u00e9. Editer le fichier: /etc/apache2/sites-available/wordpress.conf Ajouter le bloc suivant: <VirtualHost *:443> ServerName wordpress.kaze-cloud-secu.local DocumentRoot /var/www/html/wordpress <Directory /var/www/html/wordpress> AllowOverride All </Directory> SSLEngine on SSLCertificateFile /etc/ssl/certs/apache-selfsigned.crt SSLCertificateKeyFile /etc/ssl/private/apache-selfsigned.key </VirtualHost> La configuration finale: <VirtualHost *:80> ServerName wordpress.kaze-cloud-secu.local Redirect permanent / https://wordpress.kaze-cloud-secu.local/ </VirtualHost> <VirtualHost *:443> ServerName wordpress.kaze-cloud-secu.local DocumentRoot /var/www/html/wordpress <Directory /var/www/html/wordpress> AllowOverride All </Directory> SSLEngine on SSLCertificateFile /etc/ssl/certs/apache-selfsigned.crt SSLCertificateKeyFile /etc/ssl/private/apache-selfsigned.key </VirtualHost>","title":"S\u00e9curisation avec un certificat HTTPS"},{"location":"#protection-hst","text":"HTTP Strict Transport Security, plus connu sous le sigle HSTS est un m\u00e9canisme qui demande au client (le navigateur) de remplacer tous les liens non s\u00e9curis\u00e9s par des liens s\u00e9curis\u00e9s. Ce m\u00e9canisme permet donc de s'assurer que seules des requ\u00eates HTTPS seront utilis\u00e9es au cours de la navigation sur le site, quels que soient les liens contenus dans la page Web. Ce m\u00e9canisme peut \u00e9galement s'appliquer aux sous-domaines si l'on pr\u00e9cise la directive includeSubDomains dans la configuration. Ainsi, les sous domaines seront eux aussi affich\u00e9s en HTTPS. Pour activer le protocole HSTS sur Apache dans les en-t\u00eates de trames, le plus simple est de modifier la configuration du serveur Apache. Ainsi, si le serveur h\u00e9berge plusieurs sites, tous b\u00e9n\u00e9ficieront de cette directive. Pour cela, il convient d'\u00e9diter le fichier /etc/apache2/conf-available/security.conf pour ajouter la ligne ci-dessous : Header always set Strict-Transport-Security \"max-age=31536000; includeSubDomains; preload\" Sinon au niveau de la configuration du wordpress.conf : <VirtualHost *:443> ServerName wordpress.kaze-cloud-secu.local DocumentRoot /var/www/html/wordpress <Directory /var/www/html/wordpress> AllowOverride All </Directory> SSLEngine on SSLCertificateFile /etc/ssl/certs/apache-selfsigned.crt SSLCertificateKeyFile /etc/ssl/private/apache-selfsigned.key Header always set Strict-Transport-Security \"max-age=63072000; includeSubDomains\" </VirtualHost> Important : Le site doit avoir un certificat SSL. Avant de faire la manipulation Relancer le service Apache2. Verification:","title":"Protection HST"},{"location":"#protection-cors","text":"Le Cross-Origin Resource Sharing ou CORS est un m\u00e9canisme qui permet \u00e0 des ressources restreintes d'une page web d'\u00eatre r\u00e9cup\u00e9r\u00e9es par un autre domaine ext\u00e9rieur au domaine \u00e0 partir duquel la premi\u00e8re ressource a \u00e9t\u00e9 servie. Voici comment activer CORS sur Apache Vous aurez besoin d'activer les en-t\u00eates module pour activer CORS sur Apache sur Debian, ouvrez un terminal de commande et lancez la commande suivante pour activer les en-t\u00eates module. sudo a2enmod headers Si vous souhaitez activer CORS pour un domaine de site Web (par exemple, example.com), sp\u00e9cifiez ce domaine \u00e0 la place du caract\u00e8re g\u00e9n\u00e9rique * . Header add Access-Control-Allow-Origin \"example.com\"; Configuration du wordpress.conf : <VirtualHost *:443> ServerName wordpress.kaze-cloud-secu.local DocumentRoot /var/www/html/wordpress <Directory /var/www/html/wordpress> AllowOverride All </Directory> SSLEngine on SSLCertificateFile /etc/ssl/certs/apache-selfsigned.crt SSLCertificateKeyFile /etc/ssl/private/apache-selfsigned.key Header add Access-Control-Allow-Origin \"wordpress.kaze-cloud-secu.local\" Header always set Strict-Transport-Security \"max-age=63072000; includeSubDomains\" </VirtualHost>","title":"Protection CORS"},{"location":"#headers","text":"Header add Access-Control-Allow-Origin \"wordpress.kaze-cloud-secu.local\" Header always set Strict-Transport-Security \"max-age=63072000; includeSubDomains\" Header set X-XSS-Protection \"1; mode=block\" Header append X-FRAME-OPTIONS \"DENY\"","title":"Headers"},{"location":"#securisation-contre-les-bots-crowdsec","text":"L\u2019outil CrowdSec est une sorte de Fail2Ban moderne et communautaire. L\u2019id\u00e9e est de pouvoir prot\u00e9ger efficacement ses services Web, mais \u00e9galement de pr\u00e9venir les autres utilisateurs des adresses IP malveillantes, des attaques en cours\u2026 et cela de mani\u00e8re automatis\u00e9e, afin de mettre en place des contre-mesures efficaces rapidement ! Les \u00ab Bouncers \u00bb sont l\u00e0 pour appliquer les actions (d\u00e9cisions) des sc\u00e9narios. Il s\u2019installe par exemple sur la machine qui sert de reverse proxy et/ou sur le routeur. Ils peuvent consulter les d\u00e9cisions (via l\u2019API locale) et appliquer une contre-mesure (Bannissement de l\u2019IP, mise en place d\u2019un captcha, etc.) directement sur la machine.","title":"S\u00e9curisation contre les bots : Crowdsec"},{"location":"#installation-crowdsec","text":"Sur Debian 12, CrowdSec est directement dans les d\u00e9p\u00f4ts, ce qui va nous faciliter la vie. Il suffit de mettre \u00e0 jour le cache des paquets et de lancer l'installation : sudo apt-get update sudo apt-get install -y crowdsec V\u00e9rification de l'installation cscli collections list Sortie: COLLECTIONS \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Name \ud83d\udce6 Status Version Local Path \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 crowdsecurity/apache2 \u2714\ufe0f enabled 0.1 /etc/crowdsec/collections/apache2.yaml crowdsecurity/base-http-scenarios \u2714\ufe0f enabled 0.6 /etc/crowdsec/collections/base-http-scenarios.yaml crowdsecurity/http-cve \u2714\ufe0f enabled 1.9 /etc/crowdsec/collections/http-cve.yaml crowdsecurity/linux \u2714\ufe0f enabled 0.2 /etc/crowdsec/collections/linux.yaml crowdsecurity/nginx \u2714\ufe0f enabled 0.2 /etc/crowdsec/collections/nginx.yaml crowdsecurity/sshd \u2714\ufe0f enabled 0.2 /etc/crowdsec/collections/sshd.yaml \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Si la collection \"base-http-scenarios\" est pr\u00e9sente dans la liste, ce qui normalement le cas si vous avez d\u00e9j\u00e0 install\u00e9 Apache sur votre serveur, cela va notamment permettre de bloquer les mauvais User Agents, comme ceux utilis\u00e9s par certains outils de scans. Ceci n'est qu'un exemple, car cette collection va d\u00e9tecter d'autres \u00e9v\u00e9nements comme la recherche de backdoors, etc. On peut regarder si nous avons des d\u00e9cisions actives au niveau de notre instance CrowdSec. En toute logique, non. V\u00e9rifions que ce soit bien le cas avec la commande ci-dessous issue de \"cscli\", l'ensemble de commandes associ\u00e9es \u00e0 CrowdSec.","title":"Installation CrowdSec"},{"location":"#verification-du-moteur-crowdsec-avec-nikto","text":"Nikto est un scanner de vuln\u00e9rabilit\u00e9 en ligne de commande logiciel gratuit qui analyse les serveurs Web \u00e0 la recherche de fichiers/CGI dangereux, de logiciels serveur obsol\u00e8tes et d'autres probl\u00e8mes. Avant d'ex\u00e9cuter le scan Nikto, vous pouvez v\u00e9rifier que votre machine Kali Linux parvient \u00e0 charger la page d'accueil de votre site : curl -I wordpress.kaze-cloud-secu.local Si vous obtenez un r\u00e9sultat avec un code de retour HTTP \u00e9gal \u00e0 200 , c'est tout bon ! Maintenant, on va lancer un scan de notre serveur Web avec Nikto. Pour cela, on sp\u00e9cifie l'adresse IP de l'h\u00f4te cible ou le nom de domaine, et on laisse tourner. Comme ceci : nikto -h wordpress.kaze-cloud-secu.local Sortie: \u250c\u2500\u2500(cloud\u327fkali)-[~] \u2514\u2500$ nikto -h wordpress.kaze-cloud-secu.local - Nikto v2.5.0 --------------------------------------------------------------------------- + Target IP: 10.10.100.35 + Target Hostname: wordpress.kaze-cloud-secu.local + Target Port: 80 + Start Time: 2024-04-09 08:41:57 (GMT0) --------------------------------------------------------------------------- + Server: Apache/2.4.57 (Debian) + /: The anti-clickjacking X-Frame-Options header is not present. See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options + /: The X-Content-Type-Options header is not set. This could allow the user agent to render the content of the site in a different fashion to the MIME type. See: https://www.netsparker.com/web-vulnerability-scanner/vulnerabilities/missing-content-type-header/ + Root page / redirects to: https://wordpress.kaze-cloud-secu.local/ + No CGI Directories found (use '-C all' to force check all possible dirs) Suite au scan avec Nikto, mon adresse IP est bien dans le viseur de CrowdSec puisqu'il a d\u00e9cid\u00e9 de bannir mon adresse IP. Cependant, l'adresse IP n'est pas bloqu\u00e9e. En effet, CrowdSec doit s'appuyer sur un Bouncer pour appliquer la d\u00e9cision et bannir l'adresse IP.","title":"V\u00e9rification du moteur Crowdsec avec Nikto"},{"location":"#installation-du-bouncer","text":"","title":"Installation du Bouncer"},{"location":"#installation-de-php-composer","text":"Pour d\u00e9ployer le Bouncer PHP sur son serveur, il faut installer Composer sinon il ne s'installera pas correctement. Pour l'installer, nous avons besoin de deux paquets : php-cli et unzip, que l'on va installer sans plus attendre : sudo apt-get update sudo apt-get install php-cli unzip Ensuite, il faut se positionner dans son r\u00e9pertoire racine et r\u00e9cup\u00e9rer l'installeur avec Curl : cd ~ curl -sS https://getcomposer.org/installer -o composer-setup.php Enfin, lancez l'installation de Composer : sudo php composer-setup.php --install-dir=/usr/local/bin --filename=composer Sortie: root@wordpress:/root# sudo php composer-setup.php --install-dir=/usr/local/bin --filename=composer All settings correct for using Composer Downloading... Composer (version 2.7.2) successfully installed to: /usr/local/bin/composer Use it: php /usr/local/bin/composer root@wordpress:/root#","title":"Installation de PHP Composer"},{"location":"#installation-du-bouncer-niveau-apache","text":"Nous avons besoin de Git pour installer ce Bouncer afin de cloner le projet. Pour installer Git : sudo apt-get install git Ensuite, on r\u00e9cup\u00e8re le projet en le clonant en local : git clone https://github.com/crowdsecurity/cs-php-bouncer.git On obtient un dossier nomm\u00e9 \"cs-php-bouncer\" dans lequel on va se positionner : cd cs-php-bouncer/ sudo mkdir -p /var/www/crowdsec-standalone-bouncer sudo chown -R $(whoami):$(whoami) /var/www/crowdsec-standalone-bouncer composer create-project crowdsec/standalone-bouncer /var/www/crowdsec-standalone-bouncer --keep-vcs sudo chown -R www-data /var/www/crowdsec-standalone-bouncer sudo chmod g+w /var/www/crowdsec-standalone-bouncer G\u00e9n\u00e9rer une cl\u00e9 API: sudo cscli bouncers add standalone-bouncer Puis modifier le fichier de configuration: cp /var/www/crowdsec-standalone-bouncer/scripts/settings.php.dist /var/www/crowdsec-standalone-bouncer/scripts/settings.php nano /var/www/crowdsec-standalone-bouncer/scripts/settings.php Au niveau de YOUR_BOUNCER_API_KEY , entrer la cl\u00e9 API. Ajouter dans le bloc wordpress.conf : <VirtualHost *:443> ServerName wordpress.kaze-cloud-secu.local DocumentRoot /var/www/html/wordpress <Directory /var/www/html/wordpress> AllowOverride All </Directory> SSLEngine on SSLCertificateFile /etc/ssl/certs/apache-selfsigned.crt SSLCertificateKeyFile /etc/ssl/private/apache-selfsigned.key Header add Access-Control-Allow-Origin \"wordpress.kaze-cloud-secu.local\" Header always set Strict-Transport-Security \"max-age=63072000; includeSubDomains\" Header set X-XSS-Protection \"1; mode=block\" php_value auto_prepend_file \"/var/www/crowdsec-standalone-bouncer/scripts/bounce.php\" </VirtualHost> Refaire un scanne avec nikto et vous devriez avoir un code 403. Et au niveau de votre navigateur une 403.","title":"Installation du Bouncer - niveau Apache"},{"location":"#installation-du-bouncer-niveau-wordpress","text":"\u00c0 partir de l'interface d'administration de WordPress, cliquez sur le lien \"Ajouter\" du menu \"Extensions\". Gr\u00e2ce \u00e0 la zone de recherche, vous pouvez trouver facilement l'extension \"CrowdSec\". Ensuite, il suffit de cliquer sur le bouton \"Installer maintenant\". Dans la foul\u00e9e de l'installation, cliquez sur le bouton \"Activer\" pour activer l'extension. Cela n'aura pas d'impact sur votre site, car il faut lier le Bouncer CrowdSec \u00e0 notre instance locale CrowdSec pour que cela fonctionne. Ensuite, retournez sur WordPress et cliquez \u00e0 gauche sur \"CrowdSec\" dans le menu afin d'acc\u00e9der \u00e0 la configuration de l'extension. Il va falloir renseigner plusieurs options : API URL : indiquez \"http://localhost:8080\", car CrowdSec est install\u00e9 sur le m\u00eame serveur que WordPress. Bouncer API Key : collez la cl\u00e9 d'API g\u00e9n\u00e9r\u00e9e pr\u00e9c\u00e9demment Bouncing level : en mode \"Normal bouncing\", CrowdSec va bannir ou pr\u00e9senter le Captcha aux clients malveillants selon la configuration, tandis qu'en mode - \"Flex bouncing\", le blocage sera toujours effectu\u00e9 via un Captcha. Enfin, le mode \"Bouncing disabled\" permet \u00e0 CrowdSec d'\u00eatre transparent donc il ne - bloquera plus personne, y compris les pirates. Prenons le mode \"Normal bouncing\" pour le moment. Public website only : d\u00e9sactivez cette option afin de prot\u00e9ger la partie publique du site, mais aussi l'espace d'administration (wp-admin). Si cette option est active, CrowdSec prot\u00e8ge seulement la partie publique du site (front office). Validez en cliquant sur le bouton \"Enregistrer les modifications\".","title":"Installation du Bouncer - niveau Wordpress"},{"location":"#securisation-waf-plugin-wordpress","text":"1: Allez dans Plugins > Ajouter. 2: Une fois l'installation termin\u00e9e, cliquez sur Activer pour activer le plugin sur votre site. 3:Entrer une cl\u00e9 de licence (que l'on peut g\u00e9n\u00e9rer gratuitement via notre adresse mail). 4: Le plug in est maintenant actif, il ne reste plus qu'\u00e0 le configurer selon nos besoins.","title":"S\u00e9curisation : WAF plugin Wordpress"},{"location":"#securisation-apache-mod_security","text":"apt-get install libapache-mod-security Le r\u00e9pertoire /etc/modsecurity est alors cr\u00e9\u00e9 avec une configuration par d\u00e9faut qu'il faut renommer pour qu'elle soit effective : cd /etc/modsecurity mv modsecurity.conf-recommended modsecurity.conf Dans le fichier /etc/modsecurity/modsecurity.conf Par d\u00e9faut, on voit que la valeur SecRuleEngine est positionn\u00e9e sur Detection Only , on passe cette valeur \u00e0 On . On va activer les r\u00e8gles: mkdir /etc/modsecurity/activated_rules ln -s /usr/share/modsecurity-crs/base_rules/* /etc/modsecurity/activated_rules cp /usr/share/modsecurity-crs/modsecurity_crs_10_setup.conf /etc/modsecurity Puis on demande au module mod-security d'Apache d'inclure ces fichiers : nano /etc/apache2/mods-enabled/mod-security.conf Ajout de la ligne: Include \"/etc/modsecurity/activated_rules/*.conf\" service apache2 reload","title":"S\u00e9curisation: Apache mod_security"},{"location":"#audit-securite","text":"","title":"Audit s\u00e9curit\u00e9"},{"location":"#nikto","text":"Nikto est un scanner de vuln\u00e9rabilit\u00e9 en ligne de commande gratuit qui analyse les serveurs Web \u00e0 la recherche de fichiers/CGI dangereux, de logiciels serveur obsol\u00e8tes et d'autres probl\u00e8mes de configurations. Il effectue des v\u00e9rifications g\u00e9n\u00e9riques et sp\u00e9cifiques au type de serveur. nikto -C all -h wordpress.kaze-cloud-secu.local Sortie: - Nikto v2.5.0 --------------------------------------------------------------------------- + Target IP: 10.10.100.35 + Target Hostname: wordpress.kaze-cloud-secu.local + Target Port: 80 + Start Time: 2024-04-09 10:19:58 (GMT0) --------------------------------------------------------------------------- + Server: Apache/2.4.57 (Debian) + /: The anti-clickjacking X-Frame-Options header is not present. See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options + /: The X-Content-Type-Options header is not set. This could allow the user agent to render the content of the site in a different fashion to the MIME type. See: https://www.netsparker.com/web-vulnerability-scanner/vulnerabilities/missing-content-type-header/ + Root page / redirects to: https://wordpress.kaze-cloud-secu.local/ + 26584 requests: 0 error(s) and 2 item(s) reported on remote host + End Time: 2024-04-09 10:21:04 (GMT0) (66 seconds) ---------------------------------------------------------------------------","title":"Nikto"},{"location":"#wpscan","text":"WP scan est un scanner de vuln\u00e9rabilit\u00e9s pour WordPress. Il est d\u00e9velopp\u00e9 en Ruby. Il est capable de lister les plugins utilis\u00e9s et vous donner les failles de s\u00e9curit\u00e9 associ\u00e9es. Il int\u00e8gre aussi un module de brute-force pour s\u2019attaquer \u00e0 l\u2019interface d\u2019administration de WordPress. wpscan --disable-tls-checks --url wordpress.kaze-cloud-secu.local --enumerate Les scannes tombent, car CrowdSec ou Wordfence d\u00e9tecte qu'on fait des requ\u00eates anormaux et agressives.","title":"WPScan"}]}